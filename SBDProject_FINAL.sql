-- Created by Vertabelo (http://vertabelo.com)
-- Last modification date: 2021-05-31 14:54:06.403

--Database for A Veterinary Surgery Praxis allowing to store 
--and process data about its employees, customers and pets as well as 
--services provided.
set serveroutput on;
set feedback on;

-- tables
-- Table: Customer
DROP TABLE CUSTOMER;
DROP TABLE EMPLOYEE;
DROP TABLE PET;
DROP TABLE SURGERY;
DROP TABLE VISIT;

CREATE TABLE Customer (
    IDCustomer integer  ,
    FName varchar2(20)  ,
    LName varchar2(20)  ,
    Adress varchar2(20) ,
    CONSTRAINT Customer_pk PRIMARY KEY (IDCustomer)
) ;

INSERT INTO Customer VALUES 
(1111, 'John', 'King', 'COKE STREET');
INSERT INTO Customer VALUES
(1112, 'ANNA', 'SMITH', 'QUEEN BRIDGE');
INSERT INTO Customer VALUES
(1113, 'DAVID', 'COWBOY', 'WASHINGTON STREET');
INSERT INTO Customer VALUES
(1114, 'OLGA', 'GAMER', 'FLOWER STREET');
INSERT INTO Customer VALUES
(1115, 'JULIET', 'DARKNESS', 'FAR AWAY STREET');
INSERT INTO Customer VALUES
(1116, 'MARK', 'TESTER', 'SOMEWHERE STREET');
INSERT INTO Customer VALUES
(1117, 'ELISE', 'BEAVER', 'WARSAW UPRISING STREET');
INSERT INTO Customer VALUES
(1118, 'DIMA', 'PEARSKY', 'PROGRAMMING STREET');

-- Table: Employee
CREATE TABLE Employee (
    IDEmployee integer  ,
    Position varchar2(20) ,
    FName varchar2(20) ,
    LName varchar2(20)  ,
    Adress varchar2(20)  ,
    Salary number(10,2) ,
    CONSTRAINT Employee_pk PRIMARY KEY (IDEmployee)
) ;
INSERT INTO Employee VALUES
(2221, 'DOCTOR', 'ADAM', 'RASPBERRY', 'LINDEN STREET', 5420.0);
INSERT INTO Employee VALUES
(2222, 'DOCTOR', 'PATRICIA', 'SPIKEY', 'CORNER STREET', 6666.0);
INSERT INTO Employee VALUES
(2223, 'DOCTOR', 'EVE', 'RASPBERRY', 'METRO STREET', 8654.0);
INSERT INTO Employee VALUES
(2224, 'ASSISTANT', 'ATHELARD', 'GAWAIN', 'ENGLAND STREET', 3210.0);
INSERT INTO Employee VALUES
(2225, 'ASSISTANT', 'ALEXANDER', 'NIGHTINGALE', 'CENTRAL STREET', 2221.0);
INSERT INTO Employee VALUES
(2226, 'SECRETARY', 'JOLINE', 'JOCQUARD', 'FRENCH STREET', 3312.0);
INSERT INTO Employee VALUES
(2227, 'SECRETARY', 'GREGORY', 'WERNER', 'HOLLYWOOD STREET', 3542.0);
INSERT INTO Employee VALUES
(2228, 'JANITOR', 'REIJI', 'CRANE', 'TASHKENT STREET', 2652.0);

-- Table: Pet
CREATE TABLE Pet (
    IDPet integer ,
    IDCustomer integer  ,
    DateOfBirth date  ,
    PetName varchar2(20)  ,
    Species varchar2(20)  ,
    Sex varchar2(20)  ,
    Breed varchar2(20)  ,
    Colour varchar2(20) ,
    CONSTRAINT Pet_pk PRIMARY KEY (IDPet)
) ;
INSERT INTO Pet VALUES
(3331, 1114, TO_DATE('29-JUN-2009', 'DD-MON-YYYY'), 'JAINA', 'CAT', 'FEMALE', 'EUROPEAN', 'BLACK');
INSERT INTO Pet VALUES
(3332, 1115, TO_DATE('5-MAR-2015', 'DD-MON-YYYY'), 'ARYA', 'CAT', 'FEMALE', 'MINE COON', 'GREY');
INSERT INTO Pet VALUES
(3333, 1115, TO_DATE('6-MAR-2015', 'DD-MON-YYYY'), 'RUFUS', 'CAT', 'MALE', 'MINE COON', 'RED');
INSERT INTO Pet VALUES
(3334, 1111, TO_DATE('15-JUL-2002', 'DD-MON-YYYY'), 'METEOR', 'BEAR', 'MALE', 'GRIZZLY', 'BROWN');
INSERT INTO Pet VALUES
(3335, 1112, TO_DATE('21-DEC-2000', 'DD-MON-YYYY'), 'YASUO', 'FERRET', 'MALE', 'WIND', 'BLUE');
INSERT INTO Pet VALUES
(3336, 1116, TO_DATE('10-AUG-2013', 'DD-MON-YYYY'), 'MOON', 'FERRET', 'FEMALE', 'WATER', 'GREY');
INSERT INTO Pet VALUES
(3337, 1113, TO_DATE('5-JAN-2005', 'DD-MON-YYYY'), 'BOY', 'DOG', 'MALE', 'GERMAN SHEPHERD', 'BLACK');
INSERT INTO Pet VALUES
(3338, 1117, TO_DATE('6-JAN-2004', 'DD-MON-YYYY'), 'ALUCARD', 'DOG', 'MALE', 'HUSKY', 'WHITE');
INSERT INTO Pet VALUES
(3339, 1118, TO_DATE('17-APR-2020', 'DD-MON-YYYY'), 'SERAPHINE', 'SNAKE', 'FEMALE', 'COBRA', 'WHITE');
INSERT INTO Pet VALUES
(3340, 1114, TO_DATE('28-MAR-2020', 'DD-MON-YYYY'), 'LUX', 'HORSE', 'FEMALE', 'ARABER', 'WHITE');
INSERT INTO Pet VALUES
(3341, 1116, TO_DATE('3-MAY-2001', 'DD-MON-YYYY'), 'JAMES', 'SNAKE', 'MALE', 'COBRA', 'GREEN');

-- Table: Surgery
CREATE TABLE Surgery (
    IDSurgery integer,
    POSITION varchar2(50)  ,
    SurgeryDate date  ,
    Room integer  ,
    Cost number(10,2)  ,
    CONSTRAINT Surgery_pk PRIMARY KEY (IDSurgery)
) ;
INSERT INTO Surgery VALUES
(4441, 'CARDIAC', TO_DATE('3-MAY-2021', 'DD-MON-YYYY'), 1, 500.00);
INSERT INTO Surgery VALUES
(4442, 'CARDIAC', TO_DATE('5-MAY-2021', 'DD-MON-YYYY'), 2, 500.00);
INSERT INTO Surgery VALUES
(4443, 'CARDIAC', TO_DATE('29-MAY-2021', 'DD-MON-YYYY'), 4, 300.00);
INSERT INTO Surgery VALUES
(4444, 'ORTHOPEDIC', TO_DATE('10-JUN-2021', 'DD-MON-YYYY'), 1, 500.00);
INSERT INTO Surgery VALUES
(4445, 'ORTHOPEDIC', TO_DATE('15-MAY-2021', 'DD-MON-YYYY'), 2, 500.00);
INSERT INTO Surgery VALUES
(4446, 'NEUROTIC', TO_DATE('14-MAY-2021', 'DD-MON-YYYY'), 1, 650.00);
INSERT INTO Surgery VALUES
(4447, 'NEUROTIC', TO_DATE('17-MAY-2021', 'DD-MON-YYYY'), 4, 1200.00);
INSERT INTO Surgery VALUES
(4448, 'ORTHOPEDIC', TO_DATE('25-JUN-2021', 'DD-MON-YYYY'), 3, 251.00);
INSERT INTO Surgery VALUES
(4449, 'ORTHOPEDIC', TO_DATE('1-JUN-2021', 'DD-MON-YYYY'), 5, 244.00);
INSERT INTO Surgery VALUES
(4450, 'CARDIAC', TO_DATE('4-MAY-2021', 'DD-MON-YYYY'), 6, 120.00);
INSERT INTO Surgery VALUES
(4451, 'NEUROTIC', TO_DATE('10-MAY-2021', 'DD-MON-YYYY'), 2, 450.00);


-- Table: Visit
CREATE TABLE Visit (
    IDVisit integer  ,
    IDPet integer  ,
    IDEmployee integer ,
    IDSurgery integer  NULL,
    VisitStartDate date,
    VisitEndDate date,
    CONSTRAINT Visit_pk PRIMARY KEY (IDVisit)
) ;
INSERT INTO Visit VALUES
(5551, 3331, 2221, 4441, TO_DATE('1-MAY-2021', 'DD-MON-YYYY'), TO_DATE('4-MAY-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5552, 3332, 2222, 4442, TO_DATE('2-MAY-2021', 'DD-MON-YYYY'), TO_DATE('10-MAY-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5553, 3333, 2221, 4443, TO_DATE('29-MAY-2021', 'DD-MON-YYYY'), TO_DATE('2-JUN-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5554, 3334, 2222, 4444, TO_DATE('10-JUN-2021', 'DD-MON-YYYY'), TO_DATE('15-JUN-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5555, 3335, 2222, 4445, TO_DATE('8-MAY-2021', 'DD-MON-YYYY'), TO_DATE('16-MAY-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5561, 3341, 2226, 4446, TO_DATE('13-MAY-2021', 'DD-MON-YYYY'), TO_DATE('15-MAY-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5556, 3336, 2223, 4447, TO_DATE('15-MAY-2021', 'DD-MON-YYYY'), TO_DATE('17-MAY-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5557, 3337, 2223, 4448, TO_DATE('24-JUN-2021', 'DD-MON-YYYY'), TO_DATE('26-JUN-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5558, 3338, 2224, 4449, TO_DATE('29-MAY-2021', 'DD-MON-YYYY'), TO_DATE('2-JUN-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5559, 3339, 2224, 4450, TO_DATE('4-MAY-2021', 'DD-MON-YYYY'), TO_DATE('10-MAY-2021', 'DD-MON-YYYY'));
INSERT INTO Visit VALUES
(5560, 3340, 2225, 4451, TO_DATE('9-MAY-2021', 'DD-MON-YYYY'), TO_DATE('12-MAY-2021', 'DD-MON-YYYY'));

-- foreign keys
-- Reference: Pet_Customer (table: Pet)
ALTER TABLE Pet ADD CONSTRAINT Pet_Customer
    FOREIGN KEY (IDCustomer)
    REFERENCES Customer (IDCustomer);

-- Reference: Visit_Employee (table: Visit)
ALTER TABLE Visit ADD CONSTRAINT Visit_Employee
    FOREIGN KEY (IDEmployee)
    REFERENCES Employee (IDEmployee);

-- Reference: Visit_Pet (table: Visit)
ALTER TABLE Visit ADD CONSTRAINT Visit_Pet
    FOREIGN KEY (IDPet)
    REFERENCES Pet (IDPet);

-- Reference: Visit_Surgery (table: Visit)
ALTER TABLE Visit ADD CONSTRAINT Visit_Surgery
    FOREIGN KEY (IDSurgery)
    REFERENCES Surgery (IDSurgery);

-- End of file.
SELECT *
FROM EMPLOYEE;

SELECT *
FROM PET;


SELECT * 
FROM VISIT;

SELECT *
FROM PET
WHERE SPECIES='CAT';


--QUERIES 

--1) SHOW NAMES OF CUSTOMERS WHOSE PETS ARE CATS, ALSO SHOW NAMES OF PETS - EQUI-JOIN

SELECT FNAME, PETNAME
FROM CUSTOMER, PET
WHERE PET.IDCUSTOMER = CUSTOMER.IDCUSTOMER 
AND SPECIES = 'CAT';

--2) SHOW OPERATIONS THAT HAPPENED IN THE FIRST HALF OF MAY 2021 - DATES

SELECT *
FROM SURGERY
WHERE SURGERYDATE BETWEEN TO_DATE('01-MAY-2021', 'DD-MON-YYYY') AND TO_DATE('16-MAY-2021', 'DD-MON-YYYY');

--3) COUNT NUMBER OF SURGERIES THAT HAPPENED IN EACH ROOM; ORDER THEM FROM 1 UPWARDS
SELECT ROOM, COUNT(IDSURGERY)
FROM SURGERY
GROUP BY ROOM
ORDER BY ROOM ASC;

--4) SHOW BREEDS AND SPECIES OF ANIMALS THAT HAD SURGERIES BETWEEN 12-18 MAY
SELECT BREED, SPECIES
FROM PET, SURGERY, VISIT
WHERE PET.IDPET = VISIT.IDPET AND SURGERY.IDSURGERY = VISIT.IDSURGERY
AND SURGERYDATE BETWEEN TO_DATE('12-MAY-2021', 'DD-MON-YYYY') AND TO_DATE('18-MAY-2021', 'DD-MON-YYYY')
ORDER BY SPECIES;

--5) SHOW THE BIGGEST NUMBER OF VISITS CARRIED OUT BY ONE POSITION 
SELECT MAX(COUNT(POSITION))
FROM VISIT V, EMPLOYEE A
WHERE A.IDEMPLOYEE = V.IDEMPLOYEE
GROUP BY A.POSITION

--6) SHOW NAMES OF ALL CUSTOMERS EXCEPT THOSE WHO OWN BEARS
SELECT FNAME, LNAME
FROM CUSTOMER
MINUS
SELECT FNAME, LNAME
FROM CUSTOMER, PET
WHERE PET.IDCUSTOMER = CUSTOMER.IDCUSTOMER AND SPECIES='BEAR';

--showing name of customer and next to it name of his pet, SHOW CUSTOMERS WITH NO PETS
SELECT FNAME, PETNAME
FROM PET, CUSTOMER
WHERE PET.IDCUSTOMER (+)= CUSTOMER.IDCUSTOMER;
INSERT INTO CUSTOMER (IDCUSTOMER, FNAME) VALUES (0023, 'KINGA');
--7) COUNT NUMBER OF MALES AND FEMALES PETS - UNION OF TWO TABLES
SELECT SEX, COUNT(SEX)
FROM PET
WHERE SEX='MALE' group by SEX
UNION
SELECT SEX, COUNT(SEX)
FROM PET
WHERE SEX='FEMALE' group by SEX;

--8) FIND NAMES OF PEOPLE WHO OWN AT LEAST 2 PETS - AGGREGATING FUNCTIONS
SELECT FNAME, LNAME
FROM CUSTOMER, PET
WHERE PET.IDCUSTOMER = CUSTOMER.IDCUSTOMER
GROUP BY FNAME, LNAME
HAVING COUNT(IDPET)>1;

--9) FIND DOCTORS EARNING MINIMAL SALARY FOR HIS OWN POSITION -- SUBQUERIES
SELECT A.FNAME, A.LNAME, A.POSITION
FROM EMPLOYEE A
WHERE SALARY =
(SELECT MIN(SALARY)
FROM EMPLOYEE
WHERE POSITION = A.POSITION)
ORDER BY A.SALARY DESC;

--10) FIND EMPLOYEES EARNING MORE THAN THE AVERAGE SALARY OF SECRETARY
SELECT FNAME, LNAME
FROM EMPLOYEE
WHERE SALARY > (
SELECT AVG(SALARY)
FROM EMPLOYEE
WHERE POSITION = 'SECRETARY');


DROP TABLE EMPLOYEEA;
DROP TABLE PETA;
DROP TABLE SURGERYA;
DROP TABLE VISITA;
DROP TABLE CUSTOMERA;

CREATE TABLE EMPLOYEEA AS SELECT * FROM EMPLOYEE;
SELECT *
FROM EMPLOYEEA;

CREATE TABLE PETA AS SELECT * FROM PET;
SELECT *
FROM PETA;

CREATE TABLE SURGERYA AS SELECT * FROM SURGERY;
SELECT *
FROM SURGERYA;

CREATE TABLE VISITA AS SELECT * FROM VISIT;
SELECT *
FROM VISITA;

CREATE TABLE CUSTOMERA AS SELECT * FROM CUSTOMER;
SELECT *
FROM CUSTOMER;

set serveroutput on;
set feedback on;
--PROCEDURES 

--PROCEDURE THAT ALLOWS TO ENTER A PET AND THEN SHOWS ALL OTHER PET'S OWNER
--PETS THAT ARE ALREADY REGISTERED IN THE DATABASE, ID PET NOT GIVEN CALCULATED 
--AUTOMATICALLY
CREATE OR REPLACE PROCEDURE PROJPROC1ADDPET 
(id_customer INT, birthdate DATE, 
pet_name Varchar, species Varchar, sex Varchar,
breed Varchar, colour Varchar)
AS
    id_pet INT;
    CURSOR cur IS SELECT IDPET, PETNAME FROM PETA WHERE PETA.IDCUSTOMER = id_customer;
    v_idpet INT;
    v_petname VARCHAR(20);
BEGIN
    SELECT NVL(MAX(IDPET) + 1, 4) INTO id_pet FROM PETA ;
    
    INSERT INTO PETA VALUES
    (id_pet, id_customer, birthdate,pet_name ,  species, sex, breed, colour);
    dbms_output.put_line('Pets with the same owner: ');
    OPEN cur;
    LOOP 
        FETCH cur INTO v_idpet, v_petname;
        EXIT WHEN cur%NOTFOUND;
        dbms_output.put_line(v_petname || ' ' || v_idpet);
    END LOOP;
    CLOSE cur;
END;

EXEC PROJPROC1ADDPET (1118, TO_DATE('5-MAR-2015', 'DD-MON-YYYY'), 'Shrok', 'Ogre', 'Male', 'Swamp Ogre', 'Swamp Green');
DELETE FROM PETA WHERE PETNAME = 'Shrok';
SELECT * FROM PETA;

--DECREASE SALARY OF AN EMPLOYEE BY 5% IF THEIR SALARY IS BIGGER THAN 8000,
--INCREASE SALARY OF AN EMPLOYEE BY 20% IF THEIR SALARY IS SMALLER THAN 4000
CREATE OR REPLACE PROCEDURE RPOJPROC2CHANGESAL(v1 INTEGER, v2 INTEGER)
AS
CURSOR curs2 IS SELECT FNAME, SALARY FROM EMPLOYEEA;
    v_fname VARCHAR(30);
    v_salary INT;
BEGIN
    OPEN curs2;
    LOOP
        FETCH curs2 INTO v_fname, v_salary;
        IF v_salary < v1 THEN
            dbms_output.put_line(v_fname || ' gets 20% increase from ' || v_salary);
            UPDATE EMPLOYEEA 
            SET SALARY=SALARY*1.2;
        ELSIF v_salary > v2 THEN
            dbms_output.put_line(v_fname || ' gets 5% decrease from ' || v_salary);
            UPDATE EMPLOYEEA 
                SET SALARY=SALARY*0.95;
        END IF;
        EXIT WHEN curs2%NOTFOUND;
    END LOOP;
    CLOSE curs2;

END;
EXEC RPOJPROC2CHANGESAL(4000, 8000);

SELECT * FROM PETA;

--TRIGGER 1 AFTER INSERT Print message 'Customer lives in the neighbourhood of one of our employees' 
--if adresses match


CREATE OR REPLACE TRIGGER PROJECT1

AFTER INSERT ON CUSTOMERA
FOR EACH ROW

DECLARE 
  COUNTER INTEGER;
BEGIN
SELECT COUNT(*) INTO COUNTER FROM EMPLOYEEA WHERE ADRESS = :NEW.ADRESS;
    IF COUNTER >0 THEN
            DBMS_OUTPUT.PUT_LINE('This customer lives in the neighbourhood of one of our employees.');
    END IF;

END;


--CHECK 
INSERT INTO CUSTOMERA  VALUES
(1121, 'qw', 'er', 'CENTRAL STREET');
DELETE FROM CUSTOMERA WHERE FNAME = 'qw';
SELECT *
FROM CUSTOMERA;
SELECT *
FROM EMPLOYEEA;


SELECT *
FROM CUSTOMERA;
DROP TRIGGER PROJECT1;
--(DONE) TRIGGER 2 BEFORE INSERT Allow to insert a new Employee without specifying the ID, it should be generated automatically.
CREATE OR REPLACE TRIGGER PROJECT2
BEFORE INSERT ON EMPLOYEEA
FOR EACH ROW
BEGIN
SELECT NVL(MAX(IDEMPLOYEE) + 1, 4) 
INTO :NEW.IDEMPLOYEE FROM EMPLOYEEA;
END;

--CHECKING TRIGGER 2
INSERT INTO EMPLOYEEA (FNAME, LNAME, SALARY) VALUES
('BEN', 'DOVER', 2420);
SELECT*
FROM EMPLOYEEA;
DELETE FROM EMPLOYEEA where fname = 'BEN';

--(DONE) TRIGGER 3 AFTER DELETE - When deleting an employee show how many people are left 
Set serverOutput on;

CREATE OR REPLACE TRIGGER PROJECT3
AFTER DELETE ON EMPLOYEEA

DECLARE N_EMP INTEGER;
BEGIN
    SELECT COUNT(*) INTO N_EMP FROM EMPLOYEEA;
    DBMS_OUTPUT.PUT_LINE(' THERE ARE THIS MANY EMPLOYEES LEFT: '|| N_EMP );
END;

DROP TRIGGER PROJECT3;
--CHECKING TRIGGER 3
INSERT INTO EMPLOYEEA (IDEMPLOYEE, FNAME, LNAME) VALUES 
(123, 'PAUL', 'MAUD-DIB');

SELECT *
FROM EMPLOYEEA;

Set serverOutput on;

DELETE FROM EMPLOYEEA WHERE IDEMPLOYEE = 123;

SELECT *
FROM EMPLOYEEA;

--(DONE) TRIGGER 4 BEFORE DELETE - WHEN DELETING A PET ALSO DELETE THE CUSTOMER 
CREATE OR REPLACE TRIGGER PROJECT4
BEFORE DELETE ON PETA

FOR EACH ROW
DECLARE COUNTER INTEGER;
BEGIN
SELECT COUNT(*) INTO COUNTER FROM PETA WHERE PETA.IDCUSTOMER = IDCUSTOMER;
    DBMS_OUTPUT.PUT_LINE( COUNTER );
END;

DROP TRIGGER PROJECT4;
--CHECKING TRIGGER 4
INSERT INTO PETA (IDPET, IDCUSTOMER, PETNAME) VALUES
(0000, 9999, 'COLOSSUS');

INSERT INTO CUSTOMERA (IDCUSTOMER, FNAME) VALUES
(9999, 'ANNA');
SELECT * 
FROM PETA;

Set serverOutput on;

SELECT *
FROM CUSTOMERA;

DELETE FROM PETA
WHERE IDCUSTOMER = 9999;
    
--(DONE)TRIGGER 5 AFTER UPDATE  FINDS AVERAGE SALARY AMONGST EMPLOYEES
CREATE OR REPLACE TRIGGER PROJECT5
AFTER UPDATE
ON EMPLOYEEA
DECLARE 
AVG_SALARY EMPLOYEEA.SALARY%TYPE;

BEGIN
SELECT AVG(SALARY) INTO AVG_SALARY
FROM EMPLOYEEA;
DBMS_OUTPUT.PUT_LINE(AVG_SALARY || '  <- NEW AVERAGE SALARY OF EMPLOYEES');
END;
--CHECKING TRIGGER 5
Set serverOutput on;
UPDATE EMPLOYEEA SET SALARY =6000 WHERE FNAME='ADAM';




--(DONE)TRIGGER 6 BEFORE UPDATE -- DATE OF VISITEND CANNOT BE EARLIER THAN VISITSTARTDATE
CREATE OR REPLACE TRIGGER PROJECT6

BEFORE UPDATE ON VISITA

FOR EACH ROW
BEGIN
IF :NEW.VISITENDDATE < :NEW.VISITSTARTDATE THEN
    DBMS_OUTPUT.PUT_LINE('Visitend must be stated during the visit, not before!');
    RAISE_APPLICATION_ERROR(-2000, 'AS INDICATED ABOVE');
END IF;
END;

-- CHECKING TRIGGER 6
SELECT * 
FROM VISITA;
Set serverOutput on;
UPDATE VISITA SET visitenddate = TO_DATE('08-MAY-21', 'DD-MON-YYYY') WHERE IDVISIT = 5561;

CREATE OR REPLACE TRIGGER PrOJECT7

BEFORE UPDATE ON CUSTOMERA

FOR EACH ROW
BEGIN
IF :NEW.FNAME = 'JOHN' THEN
    :NEW.FNAME := :OLD.FNAME;
END IF;
END;

UPDATE CUSTOMERA SET FNAME = 'JOHN' WHERE IDCUSTOMER = 1115;

SELECT *
FROM CUSTOMERA;